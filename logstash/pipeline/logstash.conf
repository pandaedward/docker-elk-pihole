input {
	beats {
		port => 5044
                type => "logs"
                tags => ["pihole","5044"]
	}

	tcp {
		port => 5000
	}
}

## Add your filters / logstash plugins configuration here
filter {

  if "pihole" in [tags] {
    grok {
      patterns_dir => ["/etc/logstash/patterns/"]
      match => {
                "message" => [

 # request - query type
 "^%{DNSMASQPREFIX} query\[%{DATA:query_type}\] %{FQDN:domain_request} from %{IP:request_from}$",

 # reponse domain to ip
 "^%{DNSMASQPREFIX} reply %{FQDN:domain_request} is %{IP:ip_response}$",

 # response domain is NXDOMAIN
 "^%{DNSMASQPREFIX} reply %{FQDN:domain_request} is NXDOMAIN$",

 # response config domain is NXDOMAIN
 "^%{DNSMASQPREFIX} config %{FQDN:domain_request} is NXDOMAIN$",

 # response config domain is no-DATA
 "^%{DNSMASQPREFIX} config %{FQDN:domain_request} is NODATA-IPv[4,6]$",

 # reponse domain to ip cname
 "^%{DNSMASQPREFIX} reply %{FQDN:domain_request} is \<CNAME\>$",

 # respone ip to domain
 "^%{DNSMASQPREFIX} reply %{IP:ip_request} is %{FQDN:domain_response}$",

 # piholed
 "^%{DNSMASQPREFIX} \/etc\/pihole\/gravity\.list %{FQDN:blocked_domain} is %{IP:pihole}$",

 # piholed 5.0
 "^%{DNSMASQPREFIX} gravity blocked %{FQDN:blocked_domain} is %{IP:pihole}$",

 # piholed local
 "^%{DNSMASQPREFIX} \/etc\/pihole\/local\.list %{FQDN:blocked_domain} is %{IP:pihole}$",

 # piholed CNAME inspection
 "^%{DNSMASQPREFIX} reply %{FQDN:domain_request} is blocked during CNAME inspection",
 
 # blacklist
 "^%{DNSMASQPREFIX} \/etc\/pihole\/black\.list %{FQDN:blocked_domain} is %{IP:pihole}$",

 # customlist
 "^%{DNSMASQPREFIX} \/etc\/pihole\/custom\.list %{FQDN:domain_request} is %{IP:ip_response}$",

 # customlist 2
 "^%{DNSMASQPREFIX} \/etc\/pihole\/custom\.list %{IP:ip_response}$ is %{FQDN:domain_request}$",

 # regex
 "^%{DNSMASQPREFIX} \/etc\/pihole\/regex\.list %{FQDN:blocked_domain} is %{IP:pihole}$",

 # reverse response etc hosts ip to domain
 "^%{DNSMASQPREFIX} \/etc\/hosts %{IP:ip_request} is %{FQDN:domain_response}$",

 # reverse response etc hosts domain to ip
 "^%{DNSMASQPREFIX} \/etc\/hosts %{FQDN:domain_request} is %{IP:ip_response}$",

 # forward dns to
 "^%{DNSMASQPREFIX} forwarded %{FQDN:domain_request_forward}$ to %{IP:dns_forward_to}$",

 # cached domain to ip
 "^%{DNSMASQPREFIX} cached %{FQDN:domain_request} is %{IP:ip_response}$",

 # cached ip to domain
 "^%{DNSMASQPREFIX} cached %{IP:ip_request} is %{FQDN:domain_response}$",

 # cached is srv
 "^%{DNSMASQPREFIX} cached %{SRV} is \<SRV\>$",

 # response is srv
 "^%{DNSMASQPREFIX} reply %{SRV} is \<SRV\>$",

 # cached domain to ip cname
 "^%{DNSMASQPREFIX} cached %{FQDN:domain_request} is \<CNAME\>$",

 # cached domain is NXDOMAIN
 "^%{DNSMASQPREFIX} cached %{FQDN:domain_request} is NXDOMAIN$",

 # cached domain is no-DATA
 "^%{DNSMASQPREFIX} cached %{FQDN:domain_request} is NODATA-IPv[4,6]$",

 # cached domain is no-DATA
 "^%{DNSMASQPREFIX} cached %{FQDN:domain_request} is NODATA$",

 # cached domain is null
 "^%{DNSMASQPREFIX} cached %{FQDN:domain_request} is \(null\)$",

 # domain is no-DATA
 "^%{DNSMASQPREFIX} reply %{FQDN:domain_request} is NODATA-IPv[4,6]$",

 # domain is no-DATA
 "^%{DNSMASQPREFIX} reply %{FQDN:domain_request} is NODATA$",

 # Duplicate
 "^%{DNSMASQPREFIX} reply query is duplicate",

 # exactly blacklisted
 "^%{DNSMASQPREFIX} exactly blacklisted %{FQDN:blocked_domain} is %{IP:pihole}$",

 # regex blacklisted
 "^%{DNSMASQPREFIX} regex blacklisted %{FQDN:blocked_domain} is %{IP:pihole}$",


 # PTR - delete?
 "^%{DNSMASQPREFIX} query\[%{WORD:query_type}\] %{HOSTNAMEPTR:request}$ from %{IP:request_from}$",

 "^%{DNSMASQPREFIX} query\[PTR\] %{HOSTNAMEPTR:request}$ from %{IP:request_from}$",

 # PTR forwarded - delete?
 "^%{DNSMASQPREFIX} forwarded %{HOSTNAMEPTR:request} to %{IP:dns_forward_to}$" ,

 # clients sending url instead of domain
 "^%{DNSMASQPREFIX} (query\[.*\]|config|forwarded|reply|cached) %{URI:URI}.*$",

 # SERVFAIL
 "^%{DNSMASQPREFIX} reply error is SERVFAIL"

                  ]
      }
}

# to do cached and cached reverse

      if [message] =~ "cached" and [message] =~ "NXDOMAIN" {
        mutate {
          add_tag => [ "cached_NXDOMAIN" ]
        }
      }
 
      else if [message] =~ "reply query is duplicate" {
        drop { }
      }

      else if [NODATA] {
        mutate {
          add_tag => [ "NODATA" ]
        }
      }

      else if [request_from] and [message] =~ "query" {
        mutate {
          add_tag => [ "request_and_query_type" ]
        }
      }

      else if [ip_response] and [message] =~ "reply" {
        geoip {
          source => "ip_response"
        }
        mutate {
          add_tag => [ "response_domain_to_ip" ]
        }
      }

      else if [message] =~ "CNAME" and [message] =~ "reply" {
        mutate {
          add_tag => [ "response_domain_to_ip_CNAME" ]
        }
      }

      else if [domain_response] and [message] =~ "reply" {
        mutate {
          add_tag => [ "response_ip_to_domain" ]
        }
        geoip {
          source => "ip_request"
        }
      }

      else if [blocked_domain] {
        mutate {
          add_tag => [ "piholed" ]
        }
      }

      else if [message] =~ "\/etc\/hosts" {
        mutate {
          add_tag => [ "reverse_hostsfile" ]
        }
      }

      else if [dns_forward_to] {
        mutate {
          add_tag => [ "dns_forward" ]
        }
      }

      else if [ip_request] and [message] =~ "cached" {
        mutate {
          add_tag => [ "cached_ip_to_domain" ]
        }
        geoip {
          source => "ip_request"
        }
      }

      else if [domain_request] and [message] =~ "cached" and [message] =~ "CNAME" {
        mutate {
          add_tag => [ "cached_domain_to_ip_cname" ]
        }
      }

      else if [domain_request] and [message] =~ "cached" {
        mutate {
          add_tag => [ "cached_domain_to_ip" ]
        }
        geoip {
          source => "ip_response"
        }
      }

      if [domain_request] {
        geoip {
#          cache_size => "10000"
          source => "domain_request"
        }
      } 
      
      if [ip_response] {
        mutate {
          add_field => { "ip_or_domain_response" => "%{domain_request}" }
        }
      }

      if [domain_response] {
        mutate {
          add_field => { "ip_or_domain_response" => "%{domain_response}" }
        }              
      }

      if [blocked_domain] {
        mutate {
          add_field => { "ip_or_domain_response" => "%{blocked_domain}" }
        }
      }

    if "_grokparsefailure" in [tags] and "cached NXDOMAIN" in [tags] and "reverse hostsfile" in [tags] {
      mutate {
        add_tag => [ "grok_parse_failure" ]
      }
    }
    # else if [source_host] =~ "172.20.1.159" {
    #   # add_tag => ["debian_self"]
    #   # Drop noisy debian
    #   drop { }
    # }
    else {
      mutate {
        add_field => {
          "[source_fqdn]" => "%{source_host}"
        }
      }
      dns {
        add_tag => ["dns_lookup"]
        nameserver => "172.20.1.1"
        reverse => ["source_fqdn"]
        action => "replace"
        hit_cache_size => 100000
        hit_cache_ttl => 900
        # failed_cache_size => 1024
        # failed_cache_ttl => 900
      }
    }

    # mutate {
    #   add_field => {
    #     "[source_fqdn]" => "%{source_host}"
    #   }
    # }

    # dns {
    #   add_tag => ["dns_lookup"]
    #   nameserver => ["172.20.1.148", "172.20.1.52", "172.20.1.246"]
    #   reverse => ["source_fqdn"]
    #   action => "replace"
    #   hit_cache_size => 10000
    #   hit_cache_ttl => 900
    #   failed_cache_size => 512
    #   failed_cache_ttl => 900
    # }


  date {
    match => [ "date", "MMM  d HH:mm:ss","MMM dd HH:mm:ss" ]
	timezone => "Pacific/Auckland"				 
  }

  }
  
   if "%" in [source_host] {
    mutate {
        gsub => [
          "source_host", "%.*$",""
        ]
    }
  }
  
}


output {
	elasticsearch {
		hosts => "https://elasticsearch:9200"
		user => "elastic"
		password => "REDACTED"
		ecs_compatibility => disabled
                index => "logstash-syslog-dns-%{+YYYY.MM}"
                ssl => true
                ssl_certificate_verification => false
                cacert => "config/elasticsearch-ca.pem"

	}
}
